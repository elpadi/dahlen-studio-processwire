<?php
namespace ProcessWire;

use Functional as F;
use Thunder\Shortcode\HandlerContainer\HandlerContainer;
use Thunder\Shortcode\Parser\RegularParser;
use Thunder\Shortcode\Processor\Processor;
use Thunder\Shortcode\Shortcode\ShortcodeInterface;

/**
 * ProcessWire 'Hello world' demonstration module
 *
 * Demonstrates the Module interface and how to add hooks.
 * 
 * See README file for further links regarding module development.
 * 
 * This file is licensed under the MIT license
 * https://processwire.com/about/license/mit/
 * 
 * ProcessWire 3.x (development), Copyright 2015 by Ryan Cramer
 * https://processwire.com
 *
 */

class Zenphoto extends WireData implements Module {

	private static $zdb;

	const DEFAULT_MOTION_TIMING = 250;
	const DEFAULT_MOTION_START = 20;

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'Zenphoto', 

			// version number 
			'version' => 1, 

			// summary is brief description of what this module is
			'summary' => 'Bridge between the data inside Zenphoto and ProcessWire.',
			
			// Optional URL to more information about the module
			'href' => '',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true, 
		
			// Optional font-awesome icon name, minus the 'fa-' part
			'icon' => 'smile-o', 
			);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {

		$this->addHook('Page::slideshowImages', $this, 'slideshowImages'); 
		$this->addHookAfter('Fieldtype::wakeupValue', $this, 'parseShortcodes'); 

	}

	public function parseShortcodes($event) {
		$page = $event->arguments[0];
		$field = $event->arguments[1];
		$value = $event->arguments[2];
		
		// don't add this to the admin pages
		if (!$GLOBALS['wire']->page || $GLOBALS['wire']->page->template->name === 'admin') return;

		// only run on content field
		if ($field->name !== 'content') return;

		$handlers = new HandlerContainer();
		foreach (['slideshow','motion'] as $method) $handlers->add($method, [__CLASS__, $method]);
		$processor = new Processor(new RegularParser(), $handlers);

		$event->return = $processor->withRecursionDepth(0)->process($value);
	}

	public function slideshowImages($event) {
		$page = $event->object;
		$event->return = static::fetchAlbumImages($page->name);
	}

	private static function zenphotoDB() {
		global $wire, $_zp_conf_vars;
		if (self::$zdb) return self::$zdb;
		include($wire->config->paths->root.'zenphoto/zp-data/zenphoto.cfg.php');
		self::$zdb = new \PDO("mysql:dbname=$_zp_conf_vars[mysql_database];host=$_zp_conf_vars[mysql_host]", $_zp_conf_vars['mysql_user'], $_zp_conf_vars['mysql_pass']);
		return self::$zdb;
	}

	protected static function fetchAlbumImages($name) {
		$db = self::zenphotoDB();
		return $GLOBALS['wire']->cache->get("album-images--$name", $GLOBALS['wire']->config->debug ? WireCache::expireNow : WireCache::expireDaily, function() use ($db, $name) {
			$images = [];

			$sth = $db->prepare("SELECT `id` FROM `zp_albums` WHERE `folder`=?");
			$sth->execute([$name]);
			$id = intval($sth->fetch(\PDO::FETCH_OBJ)->id);

			$sth = $db->query("SELECT `filename`,`width`,`height` FROM `zp_images` WHERE `albumid`=$id ORDER BY `sort_order` ASC");
			while ($img = $sth->fetch(\PDO::FETCH_OBJ)) $images[] = $img;

			return $images;
		});
	}

	protected static function render($template_name, $vars) {
		$vars['assets_url'] = $GLOBALS['wire']->config->urls->assets;
		$vars['album_url'] = "{$GLOBALS['wire']->config->urls->root}zenphoto/albums/$vars[name]/";
		$vars['poster'] = $vars['album_url'].$vars['images'][0]->filename;
		return $GLOBALS['twig']->render("components/$template_name.html", $vars);
	}

	public static function slideshow(ShortcodeInterface $s) {
		$name = $s->getParameter('name');
		$images = array_slice(static::fetchAlbumImages($name), 0, 20);

		$vars = compact('name','images');
		return static::render('slideshow', $vars);
	}

	public static function motion(ShortcodeInterface $s) {
		$name = $s->getParameter('name');
		$title = ucwords(str_replace('-', ' ', $name));
		$js = str_replace(' ', '', $title);
		$timing = $s->getParameter('timing', self::DEFAULT_MOTION_TIMING);
		$start = $s->getParameter('start', self::DEFAULT_MOTION_START);
		$images = static::fetchAlbumImages($name);

		$vars = compact('name','images','title','js','timing','start');
		return static::render('motion', $vars);
	}

}
