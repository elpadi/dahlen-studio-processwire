<?php
namespace ProcessWire;

use Functional as F;

/**
 * ProcessWire 'Hello world' demonstration module
 *
 * Demonstrates the Module interface and how to add hooks.
 * 
 * See README file for further links regarding module development.
 * 
 * This file is licensed under the MIT license
 * https://processwire.com/about/license/mit/
 * 
 * ProcessWire 3.x (development), Copyright 2015 by Ryan Cramer
 * https://processwire.com
 *
 */

class PageMenu extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'Page Menu', 

			// version number 
			'version' => 1, 

			// summary is brief description of what this module is
			'summary' => 'Outputs an html menu using the children of the current page.',
			
			// Optional URL to more information about the module
			'href' => '',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true, 
		
			// Optional font-awesome icon name, minus the 'fa-' part
			'icon' => 'smile-o', 
			);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {

		// add a hook after each page is rendered and modify the output
		$this->addHook('Page::menuHtml', $this, 'html'); 

	}

	public function html($event) {
		$html = '';
		$item = $event->object;
		$page = $GLOBALS['wire']->page;
		$selected = $item->id === $page->id || $item->id === $page->parentID;
		$title = $item->menu_title ? $item->menu_title : $item->title;
		if ($item->numChildren) {
			$html .= sprintf('<li class="%s"><a href="%s">%s</a><ul>%s</ul></li>', $selected ? 'selected' : '', $item->url, $title, implode('', F\invoke($item->children(), 'menuHtml')));
		}
		else $html .= sprintf('<li class="%s"><a href="%s">%s</a></li>', $selected ? 'selected' : '', $item->url, $title);
		$event->return = $html;
	}

}

